// src/errors.ts
var ValidationError = class extends Error {
  constructor(message, options) {
    super(message);
    this.details = options.details;
  }
};
function fromZodError(zError, {
  maxIssuesInMessage = 99,
  issueSeparator = "\n- ",
  prefixSeparator = "\n- ",
  prefix = "Validation Error"
} = {}) {
  function joinPath(arr) {
    return arr.reduce((acc, value) => {
      if (typeof value === "number")
        return `${acc}[${value}]`;
      const separator = acc === "" ? "" : ".";
      return acc + separator + value;
    }, "");
  }
  const reason = zError.errors.slice(0, maxIssuesInMessage).map((issue) => {
    const { message: message2, path } = issue;
    if (path.length > 0)
      return `${message2} at \`${joinPath(path)}\``;
    return message2;
  }).join(issueSeparator);
  const message = reason ? [prefix, reason].join(prefixSeparator) : prefix;
  return new ValidationError(message, {
    details: zError.errors
  });
}

export {
  fromZodError
};
