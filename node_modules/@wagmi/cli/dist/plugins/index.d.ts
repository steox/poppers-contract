import { R as RequiredBy, P as Plugin, a as ContractConfig } from '../config-6e2b110a.js';
import { Address } from 'viem';
import { Response, RequestInfo, RequestInit } from 'node-fetch';
import * as chain from '@wagmi/chains';
import 'abitype';

type ActionsConfig = {
    /**
     * Generate `getContract` action.
     *
     * @default true
     */
    getContract?: boolean;
    /**
     * Override detected import source for actions.
     */
    overridePackageName?: 'wagmi/actions' | '@wagmi/core';
    /**
     * Generate `prepareWriteContract` action.
     *
     * @default true
     */
    prepareWriteContract?: boolean;
    /**
     * Generate `readContract` action.
     *
     * @default true
     */
    readContract?: boolean;
    /**
     * Generate `watchContractEvent` action.
     *
     * @default true
     */
    watchContractEvent?: boolean;
    /**
     * Generate `writeContract` action.
     *
     * @default true
     */
    writeContract?: boolean;
};
type ActionsResult = RequiredBy<Plugin, 'run'>;
declare function actions(config?: ActionsConfig): ActionsResult;

type BlockExplorerConfig = {
    /**
     * API key for block explorer. Appended to the request URL as query param `&apikey=${apiKey}`.
     */
    apiKey?: string;
    /**
     * Base URL for block explorer.
     */
    baseUrl: string;
    /**
     * Duration in milliseconds to cache ABIs.
     *
     * @default 1_800_000 // 30m in ms
     */
    cacheDuration?: number;
    /**
     * Contracts to fetch ABIs for.
     */
    contracts: Omit<ContractConfig, 'abi'>[];
    /**
     * Function to get address from contract config.
     */
    getAddress?(config: {
        address: NonNullable<ContractConfig['address']>;
    }): Address;
    /**
     * Name of source.
     */
    name?: ContractConfig['name'];
};
/**
 * Fetches contract ABIs from block explorers, supporting `?module=contract&action=getabi` requests.
 */
declare function blockExplorer({ apiKey, baseUrl, cacheDuration, contracts, getAddress, name, }: BlockExplorerConfig): Required<Pick<Plugin, "contracts">> & Omit<Plugin, "contracts">;

type ERCConfig = {
    /**
     * ERC-20: Token Standard
     *
     * https://eips.ethereum.org/EIPS/eip-20
     *
     * @default true
     */
    20?: boolean;
    /**
     * ERC-721: Non-Fungible Token Standard
     *
     * https://eips.ethereum.org/EIPS/eip-721
     *
     * @default true
     */
    721?: boolean;
    /**
     * ERC-4626: Tokenized Vaults
     *
     * https://eips.ethereum.org/EIPS/eip-4626
     *
     * @default false
     */
    4626?: boolean;
};
type ERCResult = RequiredBy<Plugin, 'contracts'>;
/**
 * Add popular ERC ABIs to contracts.
 */
declare function erc(config?: ERCConfig): ERCResult;

declare const apiUrls: {
    1: string;
    5: string;
    11155111: string;
    10: string;
    420: string;
    137: string;
    80001: string;
    42161: string;
    421613: string;
    56: string;
    97: string;
    128: string;
    256: string;
    250: string;
    4002: string;
    43114: string;
    43113: string;
    42220: string;
    44787: string;
};
type ChainId$1 = keyof typeof apiUrls;
type EtherscanConfig<TChainId extends number> = {
    /**
     * Etherscan API key.
     *
     * API keys are specific per network and include testnets (e.g. Ethereum Mainnet and Goerli share same API key). Create or manage keys:
     * - [__Ethereum__](https://etherscan.io/myapikey)
     * - [__Arbitrum__](https://arbiscan.io/myapikey)
     * - [__Avalanche__](https://snowtrace.io/myapikey)
     * - [__BNB Smart Chain__](https://bscscan.com/myapikey)
     * - [__Celo__](https://celoscan.io/myapikey)
     * - [__Fantom__](https://ftmscan.com/myapikey)
     * - [__Heco Chain__](https://hecoinfo.com/myapikey)
     * - [__Optimism__](https://optimistic.etherscan.io/myapikey)
     * - [__Polygon__](https://polygonscan.com/myapikey)
     */
    apiKey: string;
    /**
     * Duration in milliseconds to cache ABIs.
     *
     * @default 1_800_000 // 30m in ms
     */
    cacheDuration?: number;
    /**
     * Chain id to use for fetching ABI.
     *
     * If `address` is an object, `chainId` is used to select the address.
     */
    chainId: TChainId;
    /**
     * Contracts to fetch ABIs for.
     */
    contracts: Omit<ContractConfig<ChainId$1, TChainId>, 'abi'>[];
};
/**
 * Fetches contract ABIs from Etherscan.
 */
declare function etherscan<TChainId extends ChainId$1>({ apiKey, cacheDuration, chainId, contracts: contracts_, }: EtherscanConfig<TChainId>): Required<Pick<Plugin, "contracts">> & Omit<Plugin, "contracts">;

type FetchConfig = {
    /**
     * Duration in milliseconds to cache ABIs from request.
     *
     * @default 1_800_000 // 30m in ms
     */
    cacheDuration?: number;
    /**
     * Contracts to fetch ABIs for.
     */
    contracts: Omit<ContractConfig, 'abi'>[];
    /**
     * Function for creating a cache key for contract.
     */
    getCacheKey?(config: {
        contract: Omit<ContractConfig, 'abi'>;
    }): string;
    /**
     * Name of source.
     */
    name?: ContractConfig['name'];
    /**
     * Function for parsing ABI from fetch response.
     *
     * @default ({ response }) => response.json()
     */
    parse?({ response, }: {
        response: Response;
    }): Promise<ContractConfig['abi']> | ContractConfig['abi'];
    /**
     * Function for returning a request to fetch ABI from.
     */
    request(config: {
        address?: ContractConfig['address'];
    }): Promise<{
        url: RequestInfo;
        init?: RequestInit;
    }> | {
        url: RequestInfo;
        init?: RequestInit;
    };
    /**
     * Duration in milliseconds before request times out.
     *
     * @default 5_000 // 5s in ms
     */
    timeoutDuration?: number;
};
type FetchResult = RequiredBy<Plugin, 'contracts'>;
/**
 * Fetches and parses contract ABIs from network resource with `fetch`.
 */
declare function fetch({ cacheDuration, contracts: contractConfigs, getCacheKey, name, parse, request, timeoutDuration, }: FetchConfig): FetchResult;

type FoundryConfig<TProject extends string> = {
    /**
     * Project's artifacts directory.
     *
     * Same as your project's `--out` (`-o`) option.
     *
     * @default foundry.config#out | 'out'
     */
    artifacts?: string;
    /**
     * Mapping of addresses to attach to artifacts.
     *
     * ---
     *
     * Adding the following declaration to your config file for strict deployment names:
     *
     * ```ts
     * declare module '@wagmi/cli/plugins' {
     *   export interface Foundry {
     *     deployments: {
     *       ['../hello_foundry']: 'Counter'
     *       // ^? Path to project  ^? Contract names
     *     }
     *   }
     * }
     * ```
     *
     * TODO: `@wagmi/cli` should generate this file in the future
     */
    deployments?: {
        [_ in FoundryResolved<TProject>['deployments']]: ContractConfig['address'];
    };
    /** Artifact files to exclude. */
    exclude?: string[];
    /** [Forge](https://book.getfoundry.sh/forge) configuration */
    forge?: {
        /**
         * Remove build artifacts and cache directories on start up.
         *
         * @default false
         */
        clean?: boolean;
        /**
         * Build Foundry project before fetching artifacts.
         *
         * @default true
         */
        build?: boolean;
        /**
         * Path to `forge` executable command
         *
         * @default "forge"
         */
        path?: string;
        /**
         * Rebuild every time a watched file or directory is changed.
         *
         * @default true
         */
        rebuild?: boolean;
    };
    /** Artifact files to include. */
    include?: string[];
    /** Optional prefix to prepend to artifact names. */
    namePrefix?: string;
    /** Path to foundry project. */
    project?: TProject;
};
type FoundryResult = RequiredBy<Plugin, 'contracts' | 'validate' | 'watch'>;
/**
 * Resolves ABIs from [Foundry](https://github.com/foundry-rs/foundry) project.
 */
declare function foundry<TProject extends string>({ artifacts, deployments, exclude, forge: { clean, build, path: forgeExecutable, rebuild, }, include, namePrefix, project: project_, }?: FoundryConfig<TProject>): FoundryResult;

type HardhatConfig<TProject extends string> = {
    /**
     * Project's artifacts directory.
     *
     * Same as your project's `artifacts` [path configuration](https://hardhat.org/hardhat-runner/docs/config#path-configuration) option.
     *
     * @default 'artifacts/'
     */
    artifacts?: string;
    /**
     * Mapping of addresses to attach to artifacts.
     *
     * ---
     *
     * Adding the following declaration to your config file for strict deployment names:
     *
     * ```ts
     * declare module '@wagmi/cli/plugins' {
     *   export interface Hardhat {
     *     deployments: {
     *       ['../hello_hardhat']: 'Counter'
     *       // ^? Path to project  ^? Contract names
     *     }
     *   }
     * }
     * ```
     *
     * TODO: `@wagmi/cli` should generate this file in the future
     */
    deployments?: {
        [_ in HardhatResolved<TProject>['deployments']]: ContractConfig['address'];
    };
    /** Artifact files to exclude. */
    exclude?: string[];
    /** Commands to run */
    commands?: {
        /**
         * Remove build artifacts and cache directories on start up.
         *
         * @default `${packageManger} hardhat clean`
         */
        clean?: string | boolean;
        /**
         * Build Hardhat project before fetching artifacts.
         *
         * @default `${packageManger} hardhat compile`
         */
        build?: string | boolean;
        /**
         * Command to run when watched file or directory is changed.
         *
         * @default `${packageManger} hardhat compile`
         */
        rebuild?: string | boolean;
    };
    /** Artifact files to include. */
    include?: string[];
    /** Optional prefix to prepend to artifact names. */
    namePrefix?: string;
    /** Path to Hardhat project. */
    project: TProject;
    /**
     * Project's artifacts directory.
     *
     * Same as your project's `sources` [path configuration](https://hardhat.org/hardhat-runner/docs/config#path-configuration) option.
     *
     * @default 'contracts/'
     */
    sources?: string;
};
type HardhatResult = RequiredBy<Plugin, 'contracts' | 'validate' | 'watch'>;
/**
 * Resolves ABIs from [Hardhat](https://github.com/NomicFoundation/hardhat) project.
 */
declare function hardhat<TProject extends string>({ artifacts, deployments, exclude, commands, include, namePrefix, project: project_, sources, }: HardhatConfig<TProject>): HardhatResult;

type ReactConfig = {
    /**
     * Generate `useContractEvent` hook.
     *
     * @default true
     */
    useContractEvent?: boolean;
    /**
     * Generate `useContractEvent` hook for each event in contract ABI.
     *
     * @default true
     */
    useContractItemEvent?: boolean;
    /**
     * Generate `useContractRead` hook.
     *
     * @default true
     */
    useContractRead?: boolean;
    /**
     * Generate `useContractRead` hook for each "read" function in contract ABI.
     *
     * @default true
     */
    useContractFunctionRead?: boolean;
    /**
     * Generate `useContractWrite` hook.
     *
     * @default true
     */
    useContractWrite?: boolean;
    /**
     * Generate `useContractWrite` hook for each "write" function in contract ABI.
     *
     * @default true
     */
    useContractFunctionWrite?: boolean;
    /**
     * Generate `usePrepareContractWrite` hook.
     *
     * @default true
     */
    usePrepareContractWrite?: boolean;
    /**
     * Generate `usePrepareContractWrite` hook for each "write" function in contract ABI.
     *
     * @default true
     */
    usePrepareContractFunctionWrite?: boolean;
};
type ReactResult = RequiredBy<Plugin, 'run'>;
declare function react(config?: ReactConfig): ReactResult;

type SourcifyConfig<TChainId extends number> = {
    /**
     * Duration in milliseconds to cache ABIs.
     *
     * @default 1_800_000 // 30m in ms
     */
    cacheDuration?: number;
    /**
     * Chain id to use for fetching ABI.
     *
     * If `address` is an object, `chainId` is used to select the address.
     *
     * See https://docs.sourcify.dev/docs/chains for supported chains.
     */
    chainId: TChainId;
    /**
     * Contracts to fetch ABIs for.
     */
    contracts: Omit<ContractConfig<ChainId, TChainId>, 'abi'>[];
};
/**
 * Fetches contract ABIs from Sourcify.
 */
declare function sourcify<TChainId extends ChainId>({ cacheDuration, chainId, contracts: contracts_, }: SourcifyConfig<TChainId>): Required<Pick<Plugin, "contracts">> & Omit<Plugin, "contracts">;
type ChainId = typeof chain.mainnet.id | typeof chain.goerli.id | 11155111 | typeof chain.arbitrumGoerli.id | typeof chain.arbitrum.id | 592 | typeof chain.aurora.id | typeof chain.auroraTestnet.id | typeof chain.avalanche.id | typeof chain.avalancheFuji.id | 56 | 97 | 288 | 28 | 534 | typeof chain.canto.id | typeof chain.celoAlfajores.id | 62320 | typeof chain.celo.id | typeof chain.gnosisChiado.id | 103090 | 53935 | 335 | 44 | 43 | 432204 | 432201 | 246 | 73799 | typeof chain.evmos.id | typeof chain.evmosTestnet.id | 122 | 486217935 | 192837465 | 356256156 | typeof chain.gnosis.id | 71402 | 71401 | 420420 | 420666 | 8217 | 1001 | 82 | 83 | 1287 | 1284 | 1285 | 62621 | 42262 | 42261 | 23295 | 311752642 | 4216137055 | typeof chain.optimism.id | 28528 | typeof chain.optimismGoerli.id | 300 | 99 | 77 | 11297108109 | 11297108099 | typeof chain.polygon.id | typeof chain.polygonMumbai.id | 336 | 57 | 5700 | 40 | 41 | 8 | 106 | 11111 | 51 | 7001;

interface Foundry {
    [key: string]: unknown;
}
interface FoundryResolved<TProject extends string> {
    deployments: unknown extends Foundry['deployments'] ? string : TProject extends keyof Foundry['deployments'] ? Foundry['deployments'][TProject] : string;
}
interface Hardhat {
    [key: string]: unknown;
}
interface HardhatResolved<TProject extends string> {
    deployments: unknown extends Hardhat['deployments'] ? string : TProject extends keyof Hardhat['deployments'] ? Hardhat['deployments'][TProject] : string;
}

export { Foundry, FoundryResolved, Hardhat, HardhatResolved, actions, blockExplorer, erc, etherscan, fetch, foundry, hardhat, react, sourcify };
